from collections import deque

def bfs(n, m, grid, start, end):
    directions = [(-1, 0, 'U'), (1, 0, 'D'), (0, -1, 'L'), (0, 1, 'R')]
    queue = deque([(start[0], start[1], "")])
    visited = [[False] * m for _ in range(n)]
    visited[start[0]][start[1]] = True
    
    while queue:
        x, y, path = queue.popleft()
        if (x, y) == end:
            return "YES", len(path), path
        for dx, dy, d in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != '#' and not visited[nx][ny]:
                visited[nx][ny] = True
                queue.append((nx, ny, path + d))
    
    return "NO", 0, ""

n, m = map(int, input().split())
grid = [input().strip() for _ in range(n)]

start = end = None
for i in range(n):
    for j in range(m):
        if grid[i][j] == 'A': start = (i, j)
        elif grid[i][j] == 'B': end = (i, j)

result, length, path = bfs(n, m, grid, start, end)
if result == "YES":
    print(result)
    print(length)
    print(path)
else:
    print(result)
